package com.fbfs.automatedunderwriting;

import com.fbfs.pc.au.model.workitem.WorkItemReason;
import com.fbfs.pc.ecd.model.Vehicle;
import com.fbfs.pc.ecd.model.Location;
import com.fbfs.pc.ecd.model.Policy;
import com.fbfs.pc.ecd.model.Term;
import com.fbfs.pc.ecd.model.Driver;
import com.fbfs.pc.ecd.model.ClientRelationship;
import com.fbfs.pc.ecd.model.HouseholdMember;

rule "BR__Vehicle Has Been Added With An Out of State Garaging Address__ASST(Change)~6256~"
	agenda-group "BR_Change"
	dialect "mvel"
	when
		Vehicle( added == true , $unitAtRiskNumber : unitAtRiskNumber, vehicleLocationNumber : locationNumber, $assignedDriver : assignedDriver)
		Location( locationNumber == vehicleLocationNumber , $locationState : state)
		Policy( state != $locationState , $state : state)
		not (Driver( unitAtRiskNumber == $assignedDriver , age < 25 , $clientReference : driverReference) and HouseholdMember( clientRelationshipList : clientRelationshipList) and 		ClientRelationship( clientReference == $clientReference , type == "PC" , eval( areDatesSame(expirationDate, convertToDate("9999-12-31")) )) from clientRelationshipList
) 
		( Term( effectiveDate < "30-Sep-2016" , eval( $state == "KS" || $state == "MN" || $state == "NM" || $state == "UT" )) or Term( effectiveDate < "23-Jun-2017" , eval( $state == "AZ" || $state == "IA" || $state == "NE" || $state == "SD" )) )
	then
		WorkItemReason fact0 = new WorkItemReason();
		fact0.setType( "Policy" );
		fact0.setQueue( "Asst Undw" );
		fact0.setReason( "6256: Vehicle has been added with an out of state garaging address." );
		fact0.setAddAction( "FB Memo" );
		fact0.setAddAction( "Review Garaging" );
		fact0.setAddLink( "Vehicle link" );
		fact0.setAddBookmark( "VE" );
		fact0.setAddBookmarkUnit( $unitAtRiskNumber );
		fact0.setMgmtReportingCategory( "UAR" );
		fact0.setMgmtReportingUnitAtRisk( $unitAtRiskNumber );
		insertLogical( fact0 );
end
